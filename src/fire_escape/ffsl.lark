%import common.INT
%import common.FLOAT
%import common.ESCAPED_STRING
%import common.CNAME
%import common.WS_INLINE
%import common.NEWLINE

COMMENT: /#[^\n]*/ NEWLINE
_STMT_END.1: ";" | NEWLINE | ";" NEWLINE
_NEWLINE: NEWLINE

%ignore WS_INLINE
%ignore COMMENT

int: INT
float: FLOAT
str: ESCAPED_STRING
ref: CNAME
!type: "const"? CNAME

func_call: ref "(" _NEWLINE? [ expression ( "," _NEWLINE? expression )* _NEWLINE? ]  ")"
json_expr: ref ( "[" _NEWLINE? expression _NEWLINE? "]" )+ ":" type

?expression: binary_or
?!binary_or: binary_and ( "or" binary_and )*
?!binary_and: unary_not ( "and" unary_not )*
?!unary_not: "not" unary_not | binary_cmp
?!binary_cmp: binary_add ( ( "==" | "!=" | ">" | ">=" | "<" | "<=" ) binary_add )*
?!binary_add: binary_mul ( ( "-" | "+" ) binary_mul )*
?!binary_mul: unary_neg ( ( "/" | "*" | "%" ) unary_neg )*
?!unary_neg: "-" unary_neg | binary_exp
?!binary_exp: primary ( "**" primary )*
?primary: "True"        -> true
     | "False"          -> false
     | int
     | float
     | str
     | ref
     | func_call
     | json_expr
     | "(" _NEWLINE? expression _NEWLINE? ")"

!pass_stmt: "pass" _STMT_END
assignment_stmt: ref ( ":" type )? "=" expression _STMT_END
!update_stmt: ref ( "+=" | "-=" | "*=" | "/=" ) expression _STMT_END
print_stmt: "print" "(" [ expression ( "," expression )* ] ")" _STMT_END

if_stmt: "if" expression ":" _NEWLINE? block elif_section* else_section? "end" _STMT_END
elif_section: "elif" expression ":" _NEWLINE? block
else_section: "else" ":" _NEWLINE? block

?statement: pass_stmt | assignment_stmt | update_stmt | print_stmt | if_stmt
block: statement+

source: block
