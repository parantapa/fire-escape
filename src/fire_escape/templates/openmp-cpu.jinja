{#- name: "json_expr" -#}
[](){
    try {
        return {{ expr }};
    } catch (const nlohmann::json::exception& e) {
        throw std::runtime_error(
            fmt::format(
                "bad json expression:{}:{}:{}: {}",
                "{{ pos.file }}", {{ pos.line }}, {{ pos.col }}, e.what()
            )
        );
    }
}()
{#- name: "assignment_stmt" -#}
#line {{ pos.line }} "{{ pos.file }}"
{{ lvalue }} = {{ rvalue }} ;

{#- name: "update_stmt" -#}
#line {{ pos.line }} "{{ pos.file }}"
{{ lvalue }} {{ op }} {{ rvalue }} ;

{#- name: "print_stmt" -#}
#line {{ pos.line }} "{{ pos.file }}"
fmt::println("{{ format_string }}", {{ args | join(", ") }}) ;

{#- name: "else_section" -#}
#line {{ pos.line }} "{{ pos.file }}"
else {
    {% for stmt in stmts %}
    {{ stmt | indent }}
    {% endfor %}
}

{#- name: "elif_section" -#}
#line {{ pos.line }} "{{ pos.file }}"
else if ({{ condition }}) {
    {% for stmt in stmts %}
    {{ stmt | indent }}
    {% endfor %}
}

{#- name: "if_stmt" -#}
#line {{ pos.line }} "{{ pos.file }}"
if ({{ condition }}) {
    {% for stmt in stmts %}
    {{ stmt | indent }}
    {% endfor %}
}
{% for elif in elifs %}
{{ elif }}
{% endfor %}
{{ else_ }}

{#- name: "main.cpp" -#}
#include <cmath>
#include <cstdint>
#include <stdexcept>
#include <fstream>

#include <fmt/format.h>
#include <nlohmann/json.hpp>
#include <argparse/argparse.hpp>

nlohmann::json CONFIG;

int main(int argc, char* argv[]) {
    argparse::ArgumentParser program(argv[0]);
    program.add_argument("--config").help("Configuration file (JSON)");

    try {
        program.parse_args(argc, argv);
    } catch (const std::exception& err) {
        std::cerr << err.what() << std::endl;
        std::cerr << program;
        std::exit(1);
    }

    auto config_file_opt = program.present<std::string>("--config");
    if (config_file_opt) {
        std::ifstream config_stream(*config_file_opt);
        CONFIG = nlohmann::json::parse(config_stream);
    }

    {% for var, type, init in lvars %}
    {{ type }} {{ var }} = {{ init }} ;
    {% endfor %}

    {% for stmt in stmts %}
    {{ stmt | indent }}
    {% endfor %}

    return 0;
}

{#- name: "CMakeLists.txt" -#}
cmake_minimum_required(VERSION 4.0)

project(
  {{ module }}
  VERSION 0.1.0
  LANGUAGES CXX)

find_program(CCACHE_FOUND ccache)
if(CCACHE_FOUND)
  set(CMAKE_CXX_COMPILER_LAUNCHER ccache)
endif(CCACHE_FOUND)

set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
set(CMAKE_POLICY_DEFAULT_CMP0168 NEW)
set(CMAKE_OPTIMIZE_DEPENDENCIES TRUE)

option(ENABLE_DEV_MODE "Enable developer mode" OFF)
option(ENABLE_SANITIZERS "Enable sanitzers sanitizer" OFF)

include(FetchContent)
FetchContent_Declare(
  fmt
  SYSTEM
  EXCLUDE_FROM_ALL
  GIT_REPOSITORY https://github.com/fmtlib/fmt.git
  GIT_TAG 12.0.0
  GIT_SHALLOW TRUE
  GIT_PROGRESS TRUE)
FetchContent_Declare(
  argparse
  SYSTEM
  EXCLUDE_FROM_ALL
  GIT_REPOSITORY https://github.com/p-ranav/argparse.git
  GIT_TAG v3.2
  GIT_SHALLOW TRUE
  GIT_PROGRESS TRUE)
FetchContent_Declare(
  phmap
  SYSTEM
  EXCLUDE_FROM_ALL
  GIT_REPOSITORY https://github.com/greg7mdp/parallel-hashmap.git
  GIT_TAG v2.0.0
  GIT_SHALLOW TRUE
  GIT_PROGRESS TRUE)
FetchContent_Declare(
  json
  SYSTEM
  EXCLUDE_FROM_ALL
  GIT_REPOSITORY https://github.com/nlohmann/json.git
  GIT_TAG v3.12.0
  GIT_SHALLOW TRUE
  GIT_PROGRESS TRUE)
FetchContent_Declare(
  duckdb
  SYSTEM
  EXCLUDE_FROM_ALL
  GIT_REPOSITORY https://github.com/duckdb/duckdb.git
  GIT_TAG v1.4.1
  GIT_SHALLOW TRUE
  GIT_PROGRESS TRUE)
FetchContent_MakeAvailable(fmt argparse phmap json duckdb)

find_package(OpenMP REQUIRED)

if(ENABLE_SANITIZERS)
  add_compile_options(-fsanitize=address,undefined)
  add_link_options(-fsanitize=address,undefined)
endif(ENABLE_SANITIZERS)

if(ENABLE_DEV_MODE)
  add_compile_options(-g -D_GLIBCXX_ASSERTIONS -D_GLIBCXX_SANITIZE_VECTOR)
  add_compile_options(-Wall -Wextra -Wshadow -Wunreachable-code -Wformat=2)
endif(ENABLE_DEV_MODE)

add_executable(main main.cpp)
target_link_libraries(main
    PRIVATE
    fmt::fmt
    argparse::argparse
    phmap
    nlohmann_json::nlohmann_json
    duckdb
    OpenMP::OpenMP_CXX)
target_compile_features(main PRIVATE cxx_std_23)
